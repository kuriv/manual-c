{"./":{"url":"./","title":"C","keywords":"","body":"C C 是一种通用程序设计语言，广泛用于系统软件与应用软件的开发。 "},"docs/一切的开始.html":{"url":"docs/一切的开始.html","title":"一切的开始","keywords":"","body":"一切的开始 以下是第一个 C 语言程序，也是一切的开始。 #include int main(int argc, char const *argv[]) { printf(\"Hello World!\\n\"); return 0; } "},"docs/类型、运算符与表达式.html":{"url":"docs/类型、运算符与表达式.html","title":"类型、运算符与表达式","keywords":"","body":"类型、运算符与表达式 变量名 数据类型 常量 声明 算术运算符 逻辑运算符 类型转换 自增自减运算符 位运算符 赋值运算符 条件表达式 "},"docs/类型、运算符与表达式/变量名.html":{"url":"docs/类型、运算符与表达式/变量名.html","title":"变量名","keywords":"","body":"变量名 C 语言变量名是由字母、数字和下划线组成的序列，但其第一个字符必须为字母，且严格区分大小写。 类似于 if 、 else 、 int 、 float 等关键字是保留给 C 语言本身使用的，不能用作变量名。 "},"docs/类型、运算符与表达式/数据类型.html":{"url":"docs/类型、运算符与表达式/数据类型.html","title":"数据类型","keywords":"","body":"数据类型 C 语言提供了下列几种基本数据类型。 #include int main(int argc, char const *argv[]) { char a = 'A'; // 字符型，占用一个字节，可以存放本地字符集中的一个字符 printf(\"%c\\n\", a); int b = 233; // 整型，通常反映所用机器中整数的自然长度 printf(\"%d\\n\", b); float c = 123.456; // 单精度浮点型 printf(\"%f\\n\", c); double d = 123.456; // 双精度浮点型 printf(\"%lf\\n\", d); return 0; } 此外，还有 signed 与 unsigned 等类型限定符。 "},"docs/类型、运算符与表达式/常量.html":{"url":"docs/类型、运算符与表达式/常量.html","title":"常量","keywords":"","body":"常量 类似于 233 的整数常量属于 int 类型。 #include int main(int argc, char const *argv[]) { printf(\"%d\\n\", 233); return 0; } long 类型的常量以字母 l 或 L 结尾。 #include int main(int argc, char const *argv[]) { printf(\"%d\\n\", 123456789L); return 0; } 无符号常量以字母 u 或 U 结尾。 #include int main(int argc, char const *argv[]) { printf(\"%d\\n\", 233U); return 0; } 后缀 ul 或 UL 表明是 unsigned long 类型。 #include int main(int argc, char const *argv[]) { printf(\"%d\\n\", 123456789UL); return 0; } 浮点数常量中包含一个小数点，如 123.4 。或以指数形式表示， 如 1e-2 。 #include int main(int argc, char const *argv[]) { printf(\"%f\\n\", 123.4); printf(\"%f\\n\", 1e-2); return 0; } 一个字符常量是一个整数，书写时将一个字符括在单引号中，字符在机器字符集中的数值就是字符常量的值。字符常量一般用来与其他字符进行比较，但也可以像其他整数一样参与数值运算。 #include int main(int argc, char const *argv[]) { printf(\"%c\\n\", 'A'); printf(\"%d\\n\", 'A'); return 0; } 字符常量 \\0 表示值为 0 的字符，也就是空字符 null 。 #include int main(int argc, char const *argv[]) { printf(\"%c\\n\", '\\0'); printf(\"%d\\n\", '\\0'); return 0; } 常量表达式是仅仅包含常量的表达式，这种表达式在编译时求值，而不在运行时求值。 #include int main(int argc, char const *argv[]) { int a[1 + 2 + 3]; return 0; } 字符串常量也叫字符串字面值，是用双引号括起来的 0 个或多个字符组成的字符序列。 #include int main(int argc, char const *argv[]) { printf(\"%s\\n\", \"I am a string.\"); return 0; } 编译时可以将多个字符串常量连接起来。 #include int main(int argc, char const *argv[]) { printf(\"%s\\n\", \"Hello \" \"World!\"); return 0; } 枚举是一个常量整型值的列表。 #include int main(int argc, char const *argv[]) { enum months {JAN = 1, FEB, MAR, APR, MAY, JUN, JUL, AUG, SEP, OCT, NOV, DEC}; printf(\"%d\\n\", JUL); return 0; } "},"docs/类型、运算符与表达式/声明.html":{"url":"docs/类型、运算符与表达式/声明.html","title":"声明","keywords":"","body":"声明 所有变量都必须先声明后使用。 #include int main(int argc, char const *argv[]) { int a = 233; int b = 666; printf(\"%d\\n\", a); printf(\"%d\\n\", b); return 0; } 一个声明指定一种变量类型，后面所带的变量表可以包含一个或多个该类型的变量。 #include int main(int argc, char const *argv[]) { int a, b; a = 233; b = 666; printf(\"%d\\n\", a); printf(\"%d\\n\", b); return 0; } 任何变量的声明都可以使用 const 限定符限定，该限定符指定变量的值不能被修改。 #include int main(int argc, char const *argv[]) { const int a = 233; const int b = 666; printf(\"%d\\n\", a); printf(\"%d\\n\", b); return 0; } const 限定符也可配合数组使用，这表明数组所有元素的值都不能被修改。 #include int main(int argc, char const *argv[]) { const char string[] = \"I am a string.\"; printf(\"%s\\n\", string); return 0; } "},"docs/类型、运算符与表达式/算术运算符.html":{"url":"docs/类型、运算符与表达式/算术运算符.html","title":"算术运算符","keywords":"","body":"算术运算符 二元运算符包括： + 、 - 、 * 、 / 、 % 。 #include int main(int argc, char const *argv[]) { int a = 233; int b = 666; printf(\"%d\\n\", a + b); printf(\"%d\\n\", a - b); printf(\"%d\\n\", a * b); printf(\"%d\\n\", a / b); printf(\"%d\\n\", a % b); return 0; } 整数除法会截断结果中的小数部分。 #include int main(int argc, char const *argv[]) { int a = 10; int b = 3; printf(\"%d\\n\", a / b); return 0; } 执行下面的代码，判断是否是闰年。 #include int main(int argc, char const *argv[]) { int year = 2000; if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) { printf(\"%d is a leap year.\\n\", year); } else { printf(\"%d is not a leap year.\\n\", year); } return 0; } "},"docs/类型、运算符与表达式/逻辑运算符.html":{"url":"docs/类型、运算符与表达式/逻辑运算符.html","title":"逻辑运算符","keywords":"","body":"逻辑运算符 逻辑运算符包括： > 、 ≥ 、 #include int main(int argc, char const *argv[]) { int a = 233; int b = 666; int c = 1; printf(\"%d\\n\", a > b); printf(\"%d\\n\", a >= b); printf(\"%d\\n\", a "},"docs/类型、运算符与表达式/类型转换.html":{"url":"docs/类型、运算符与表达式/类型转换.html","title":"类型转换","keywords":"","body":"类型转换 当一个运算符的几个操作数类型不同时，就需要通过一些规则把它们转换为某种共同的类型。 #include int main(int argc, char const *argv[]) { int a = 233; float b = 666.666; printf(\"%f\\n\", a + b); printf(\"%d\\n\", a + (int)b); return 0; } 执行下面的代码，将字符串类型的数字转换为整型。 #include int main(int argc, char const *argv[]) { char string[] = \"123456\"; int a = 0; for (int i = 0; string[i] >= '0' && string[i] "},"docs/类型、运算符与表达式/自增自减运算符.html":{"url":"docs/类型、运算符与表达式/自增自减运算符.html","title":"自增自减运算符","keywords":"","body":"自增自减运算符 自增运算符 ++ 使其操作数递增 1 ，自减运算符 -- 使其操作数递减 1 。 #include int main(int argc, char const *argv[]) { int a = 233; a++; printf(\"%d\\n\", a); a--; printf(\"%d\\n\", a); return 0; } 自增自减运算符既可以用作前缀运算符，也可以用作后缀运算符。对于不同的上下文来说，效果是不同的。 #include int main(int argc, char const *argv[]) { int a = 233; int b = 666; int x; x = a++; printf(\"%d\\n\", x); x = ++b; printf(\"%d\\n\", x); return 0; } "},"docs/类型、运算符与表达式/位运算符.html":{"url":"docs/类型、运算符与表达式/位运算符.html","title":"位运算符","keywords":"","body":"位运算符 位运算符包括： & 、 | 、 ^ 、 > 、 ~ 。 #include int main(int argc, char const *argv[]) { int a = 5; int b = 3; printf(\"%d\\n\", a & b); printf(\"%d\\n\", a | b); printf(\"%d\\n\", a ^ b); printf(\"%d\\n\", a > 2); printf(\"%d\\n\", ~a); return 0; } "},"docs/类型、运算符与表达式/赋值运算符.html":{"url":"docs/类型、运算符与表达式/赋值运算符.html","title":"赋值运算符","keywords":"","body":"赋值运算符 大多数二元运算符都有一个相应的赋值运算符。 #include int main(int argc, char const *argv[]) { int a = 5; int b = 3; a += b; printf(\"%d\\n\", a); a -= b; printf(\"%d\\n\", a); a *= b; printf(\"%d\\n\", a); a /= b; printf(\"%d\\n\", a); a %= b; printf(\"%d\\n\", a); a >= b; printf(\"%d\\n\", a); a &= b; printf(\"%d\\n\", a); a |= b; printf(\"%d\\n\", a); a ^= b; printf(\"%d\\n\", a); return 0; } "},"docs/类型、运算符与表达式/条件表达式.html":{"url":"docs/类型、运算符与表达式/条件表达式.html","title":"条件表达式","keywords":"","body":"条件表达式 执行下面的代码，进行条件判断。 #include int main(int argc, char const *argv[]) { int a = 233; int b = 666; int z; if (a > b) { z = a; } else { z = b; } printf(\"%d\\n\", z); return 0; } 也可以使用三元运算符简化上面的代码。 #include int main(int argc, char const *argv[]) { int a = 233; int b = 666; int z; z = a > b ? a : b; printf(\"%d\\n\", z); return 0; } "}}